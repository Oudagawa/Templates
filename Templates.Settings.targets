<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildThisFileDirectory)\Templates.BranchSettings.targets" />
    <Import Project="$(MSBuildThisFileDirectory)\tools\Common.tasks" />
    <PropertyGroup>
        <!-- If you build the project from the command prompt, use the TemplatesVSVersion environment variable. -->
        <TemplatesTargetVersion Condition=" '$(TemplatesTargetVersion)' == '' ">$(TemplatesVSVersion)</TemplatesTargetVersion>

        <!-- If you open VS directly from the Windows shell, use the VS version as the target version. -->
        <TemplatesTargetVersion Condition=" '$(TemplatesTargetVersion)' == '' ">$(VisualStudioVersion)</TemplatesTargetVersion>

        <!-- Usually these are environment variables, but they aren't set when running VS -->
        <TemplatesRoot Condition=" '$(TemplatesRoot)' == '' ">$(MSBuildThisFileDirectory)</TemplatesRoot>
        <TemplatesBin Condition=" '$(TemplatesBin)' == '' ">$(TemplatesRoot)artifacts\build</TemplatesBin>
        <TemplatesIntermediate Condition=" '$(TemplatesIntermediate)' == '' ">$(TemplatesRoot)intermediate</TemplatesIntermediate>
        <TemplatesSource Condition=" '$(TemplatesSource)' == '' ">$(TemplatesRoot)src</TemplatesSource>
        <TemplatesTest Condition=" '$(TemplatesTest)' == '' ">$(TemplatesRoot)test</TemplatesTest>
        <TemplatesTools Condition=" '$(TemplatesTools)' == '' ">$(TemplatesRoot)tools</TemplatesTools>
        <TemplatesSetup Condition=" '$(TemplatesSetup)' == '' ">$(TemplatesRoot)setup</TemplatesSetup>
        <TemplatesTestResults Condition=" '$(TemplatesTestResults)' == '' ">$(TemplatesRoot)TestResults</TemplatesTestResults>
    </PropertyGroup>
    
    <PropertyGroup>
        <IsOfficialBuild Condition="'$(IsOfficialBuild)' == ''">false</IsOfficialBuild>
        <UseExactPackageVersions Condition="'$(TemplateBuildBranch)' == 'release'">$(IsOfficialBuild)</UseExactPackageVersions>
        <UseExactPackageVersions Condition="'$(UseExactPackageVersions)' == ''">$(IsOfficialBuild)</UseExactPackageVersions>
        <TemplateVersion Condition="'$(TemplateVersion)' == ''">$(BUILD_NUMBER)</TemplateVersion>
        <TemplateVersion Condition="'$(TemplateVersion)' == ''">Local</TemplateVersion>
        <PackageType Condition="'$(TemplateBuildBranch)' == 'release'">$(ReleasePackageType)</PackageType>
        <PackageType Condition="'$(TemplateBuildBranch)' == 'dev'">$(DevPackageType)</PackageType>
        <SignedPackageSubPath>Signed</SignedPackageSubPath>
        <ExternalPackageSubPath>coherence\ext</ExternalPackageSubPath>
        <ApplicationInsightsPackageSource Condition="'$(ApplicationInsightsPackageSource)' == ''">https://www.myget.org/F/applicationinsights/api/v3/index.json</ApplicationInsightsPackageSource>
        <AzureAdPackageSource Condition="'$(AzureAdPackageSource)' == '' and '$(TemplateBuildBranch)' == 'release'">https://www.myget.org/F/azureadwebstackrelease/api/v3/index.json</AzureAdPackageSource>
        <AzureAdPackageSource Condition="'$(AzureAdPackageSource)' == '' and '$(TemplateBuildBranch)' == 'dev'">https://www.myget.org/F/azureadwebstacknightly/api/v3/index.json</AzureAdPackageSource>
        <RoslynPackageSource Condition="'$(RoslynPackageSource)' == ''">https://www.myget.org/F/roslyn-nightly</RoslynPackageSource>
        <ForceNpmInstall Condition="'$(ForceNpmInstall)' == ''">false</ForceNpmInstall>
        <CoherenceDropFile>$(TemplatesBin)\Packages.source.txt</CoherenceDropFile>
        <RunTemplateUnitTests Condition="'$(RunTemplateUnitTests)' == ''">true</RunTemplateUnitTests>
        <SkipCopyPackages Condition="'$(SkipCopyPackages)' == ''">false</SkipCopyPackages>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TemplatesTargetVersion)' == '14.0' ">
        <!-- Visual Studio 14 properties -->
        <TemplatesTargetVersionPath>\dev14</TemplatesTargetVersionPath>
        <VersionedReferencePath>Dev14</VersionedReferencePath>
        <TargetVsVersion>VS14</TargetVsVersion>
    </PropertyGroup>

    <PropertyGroup>
        <ApplicationInsightsPackageVersion Condition="'$(ApplicationInsightsPackageVersion)' == ''">1.0.0</ApplicationInsightsPackageVersion>
        <BundlerPackageVersion Condition="'$(BundlerPackageVersion)' == ''">2.0.238</BundlerPackageVersion>
        <DefaultNugetFeedSource Condition="'$(NugetFeedSource)' == ''">api.nuget.org=https://api.nuget.org/v3/index.json</DefaultNugetFeedSource>
        <NugetFeedSource Condition="'$(NugetFeedSource)' == '' and '$(TemplateBuildBranch)' == 'release' and '$(ReleaseNugetFeedSource)' != ''">$(ReleaseNugetFeedSource)|$(DefaultNugetFeedSource)</NugetFeedSource>
        <NugetFeedSource Condition="'$(NugetFeedSource)' == '' and '$(TemplateBuildBranch)' == 'dev' and '$(DevNugetFeedSource)' != ''">$(DevNugetFeedSource)|$(DefaultNugetFeedSource)</NugetFeedSource>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Output -->
        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
        <OutputPath>$(TemplatesBin)</OutputPath>
        <IntermediateOutputPath>$(TemplatesIntermediate)</IntermediateOutputPath>
        <BaseIntermediateOutputPath>$(TemplatesIntermediate)</BaseIntermediateOutputPath>
    </PropertyGroup>
    
    <Target Name="DeterminePackageVersions" DependsOnTargets="SetupPackageSource">
        <ItemGroup Condition="'$(CoherencePackageSources)' != ''">
            <CoreAppFile Include="$(CoherencePackageSources)\Microsoft.NETCore.App.*.nupkg"/>
            <NetStandardFile Include="$(CoherencePackageSources)\NETStandard.Library.*.nupkg"/>
            <ToolsFile Include="$(CoherencePackageSources)\Microsoft.AspNetCore.Server.IISIntegration.Tools.*.nupkg"/>
            <ScaffoldingToolsFile Include="$(CoherencePackageSources)\Microsoft.VisualStudio.Web.CodeGeneration.Tools.*.nupkg"/>
            <AspNetCoreFile Include="$(CoherencePackageSources)\Microsoft.AspNetCore.Mvc.Razor.*.nupkg"/>
        </ItemGroup>

        <GetFileSemanticVersion Condition="'%(CoreAppFile.Identity)' != '' " Filename="%(CoreAppFile.Filename)">
            <Output PropertyName="NetCoreSemanticVersion" TaskParameter="SemanticVersion"/>
        </GetFileSemanticVersion>

        <GetFileSemanticVersion Condition="'%(NetStandardFile.Identity)' != '' " Filename="%(NetStandardFile.Filename)">
            <Output PropertyName="NetStandardSemanticVersion" TaskParameter="SemanticVersion"/>
        </GetFileSemanticVersion>

        <GetFileSemanticVersion Condition="'%(ToolsFile.Identity)' != '' " Filename="%(ToolsFile.Filename)">
            <Output PropertyName="ToolsSemanticVersion" TaskParameter="SemanticVersion"/>
        </GetFileSemanticVersion>

        <GetFileSemanticVersion Condition="'%(ScaffoldingToolsFile .Identity)' != '' " Filename="%(ScaffoldingToolsFile .Filename)">
            <Output PropertyName="ScaffoldingSemanticVersion" TaskParameter="SemanticVersion"/>
        </GetFileSemanticVersion>

        <GetFileSemanticVersion Condition="'%(AspNetCoreFile.Identity)' != '' " Filename="%(AspNetCoreFile.Filename)">
            <Output PropertyName="AspNetCoreSemanticVersion" TaskParameter="SemanticVersion"/>
        </GetFileSemanticVersion>

        <PropertyGroup>
            <!-- The below is a fallback version for external non CI builds -->
            <NetCoreSemanticVersion Condition="'$(PackageSourceExternal)' == ''">-*</NetCoreSemanticVersion>
            <NetCorePlatformVersion Condition="'$(NetCorePlatformVersion)' == ''">1.0.1$(NetCoreSemanticVersion)</NetCorePlatformVersion>
            <NetStandardVersion Condition="'$(NetStandardVersion)' == ''">1.6</NetStandardVersion>
            <NetStandardSemanticVersion Condition="'$(PackageSourceExternal)' == ''">-*</NetStandardSemanticVersion>
            <NetStandardPlatformVersion Condition="'$(NetStandardPlatformVersion)' == ''">$(NetStandardVersion).0$(NetStandardSemanticVersion)</NetStandardPlatformVersion>
            <ToolsSemanticVersion Condition="'$(PackageSource)' == ''">-*</ToolsSemanticVersion>
            <ToolsPackageVersion Condition="'$(ToolsPackageVersion)' == ''">1.0.0$(ToolsSemanticVersion)</ToolsPackageVersion>
            <ScaffoldingSemanticVersion Condition="'$(PackageSource)' == ''">-*</ScaffoldingSemanticVersion>
            <ScaffoldingPackageVersion Condition="'$(ScaffoldingPackageVersion)' == ''">1.0.0$(ScaffoldingSemanticVersion)</ScaffoldingPackageVersion>
            <AspNetCoreSemanticVersion Condition="'$(PackageSource)' == ''">-*</AspNetCoreSemanticVersion>
            <AspNetCorePackageVersion Condition="'$(AspNetCorePackageVersion)' == ''">1.0.1$(AspNetCoreSemanticVersion)</AspNetCorePackageVersion>
        </PropertyGroup>

        <Message Text="NetCorePlatformVersion: $(NetCorePlatformVersion)"/>
        <Message Text="NetStandardPlatformVersion: $(NetStandardPlatformVersion)"/>
        <Message Text="ToolsPackageVersion: $(ToolsPackageVersion)"/>
        <Message Text="AspNetCorePackageVersion: $(AspNetCorePackageVersion)"/>
        <Message Text="ScaffoldingPackageVersion: $(ScaffoldingPackageVersion)"/>
    </Target>
    
    <Target Name="SetupPackageSource">
        <GetPackageSource Condition="'$(SetupPackageSource)' == '' and '$(SetupDrop)' != ''" SetupDrop="$(SetupDrop)">
            <Output PropertyName="SetupPackageSource" TaskParameter="PackageSource"/>
        </GetPackageSource>
        <PropertyGroup>
            <PackageSource Condition="'$(SetupPackageSource)' != ''">$(SetupPackageSource)$(SignedPackageSubPath)\$(PackageType)</PackageSource>
            <PackageSourceExternal Condition="'$(SetupPackageSource)' != ''">$(SetupPackageSource)$(ExternalPackageSubPath)</PackageSourceExternal>
            <RemotePackageSource Condition="'$(TemplateBuildBranch)' == 'dev'">https://www.myget.org/F/aspnetvnext/api/v3/index.json</RemotePackageSource>
            <RemotePackageSource Condition="'$(TemplateBuildBranch)' == 'release'">https://www.myget.org/F/aspnetrelease/api/v3/index.json</RemotePackageSource>
            <CoherencePackageSources>$(TemplatesIntermediate)\CoherencePackages</CoherencePackageSources>
        </PropertyGroup>

        <!-- Feeds related to Coherence-Signed depends on the remote stores -->
        <ItemGroup>
            <PackageSourceForRestore Include="$(CoherencePackageSources)" Condition="'$(PackageSource)' != ''"/>
            <PackageSourceForRestore Include="$(ApplicationInsightsPackageSource)" Condition="'$(ApplicationInsightsPackageSource)' != ''"/>
            <PackageSourceForRestore Include="$(AzureAdPackageSource)" Condition="'$(AzureAdPackageSource)' != ''"/>
            <PackageSourceForRestore Include="$(RoslynPackageSource)" Condition="'$(RoslynPackageSource)' != ''"/>
            <PackageSourceForRestore Include="$(AdditionalPackageSourceForRestore)" Condition="'$(AdditionalPackageSourceForRestore)' != ''"/>
            <PackageSourceForRestore Include="https://api.nuget.org/v3/index.json"/>
        </ItemGroup>

        <PropertyGroup>
            <_PackageSourceForRestore >@(PackageSourceForRestore->'-s %(Identity)')</_PackageSourceForRestore >
            <PackageSourceForRestore >$(_PackageSourceForRestore.Replace(';', ' '))</PackageSourceForRestore >
            <PackageSourceForRestore >$(PackageSourceForRestore) -f $(RemotePackageSource)</PackageSourceForRestore >
        </PropertyGroup>

        <Message Text="SetupPackageSource: $(SetupPackageSource)"/>
        <Message Text="PackageSource: $(PackageSource)"/>
        <Message Text="PackageSourceExternal: $(PackageSourceExternal)"/>
        <Message Text="CoherencePackageSources: $(CoherencePackageSources)"/>
        <Message Text="PackageSourceFoRestore: $(PackageSourceForRestore)"/>
    </Target>

    <Target Name="CopyPackagesForBuild" DependsOnTargets="SetupPackageSource" Condition="'$(SetupPackageSource)' != '' and '$(SkipCopyPackages)' == 'false'">
        <RemoveDir Directories="$(CoherencePackageSources)" />
        <MakeDir Directories="$(CoherencePackageSources)" />

        <!-- Copy Coherence packages locally to speed up restore -->
        <ItemGroup>
            <CoherencePackages Include="$(PackageSource)\*.nupkg;
                                        $(PackageSourceExternal)\*.nupkg" />
        </ItemGroup>

        <Copy SourceFiles="@(CoherencePackages)" DestinationFolder="$(IntermediateOutputPath)\CoherencePackages" SkipUnchangedFiles="true" />
    </Target>
</Project>
